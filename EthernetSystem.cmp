	component EthernetSystem is
		port (
			LCD_RS_from_the_lcd                                   : out   std_logic;                                        -- RS
			LCD_RW_from_the_lcd                                   : out   std_logic;                                        -- RW
			LCD_data_to_and_from_the_lcd                          : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			LCD_E_from_the_lcd                                    : out   std_logic;                                        -- E
			read_n_to_the_ext_flash                               : out   std_logic_vector(0 downto 0);                     -- read_n_to_the_ext_flash
			select_n_to_the_ext_flash                             : out   std_logic_vector(0 downto 0);                     -- select_n_to_the_ext_flash
			be_n_to_the_maxII_interface                           : out   std_logic_vector(3 downto 0);                     -- be_n_to_the_maxII_interface
			oe_n_to_the_maxII_interface                           : out   std_logic_vector(0 downto 0);                     -- oe_n_to_the_maxII_interface
			cs_n_to_the_maxII_interface                           : out   std_logic_vector(0 downto 0);                     -- cs_n_to_the_maxII_interface
			flash_tristate_bridge_data                            : inout std_logic_vector(31 downto 0) := (others => 'X'); -- flash_tristate_bridge_data
			we_n_to_the_maxII_interface                           : out   std_logic_vector(0 downto 0);                     -- we_n_to_the_maxII_interface
			write_n_to_the_ext_flash                              : out   std_logic_vector(0 downto 0);                     -- write_n_to_the_ext_flash
			flash_tristate_bridge_address                         : out   std_logic_vector(25 downto 0);                    -- flash_tristate_bridge_address
			reset_n                                               : in    std_logic                     := 'X';             -- reset_n
			out_port_from_the_led_pio                             : out   std_logic_vector(3 downto 0);                     -- export
			clkin_100                                             : in    std_logic                     := 'X';             -- clk
			in_port_to_the_button_pio                             : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- export
			tse_mac_mac_status_connection_set_10                  : in    std_logic                     := 'X';             -- set_10
			tse_mac_mac_status_connection_set_1000                : in    std_logic                     := 'X';             -- set_1000
			tse_mac_mac_status_connection_eth_mode                : out   std_logic;                                        -- eth_mode
			tse_mac_mac_status_connection_ena_10                  : out   std_logic;                                        -- ena_10
			tse_mac_mac_rgmii_connection_rgmii_in                 : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- rgmii_in
			tse_mac_mac_rgmii_connection_rgmii_out                : out   std_logic_vector(3 downto 0);                     -- rgmii_out
			tse_mac_mac_rgmii_connection_rx_control               : in    std_logic                     := 'X';             -- rx_control
			tse_mac_mac_rgmii_connection_tx_control               : out   std_logic;                                        -- tx_control
			tse_mac_mac_mdio_connection_mdc                       : out   std_logic;                                        -- mdc
			tse_mac_mac_mdio_connection_mdio_in                   : in    std_logic                     := 'X';             -- mdio_in
			tse_mac_mac_mdio_connection_mdio_out                  : out   std_logic;                                        -- mdio_out
			tse_mac_mac_mdio_connection_mdio_oen                  : out   std_logic;                                        -- mdio_oen
			tse_mac_mac_misc_connection_xon_gen                   : in    std_logic                     := 'X';             -- xon_gen
			tse_mac_mac_misc_connection_xoff_gen                  : in    std_logic                     := 'X';             -- xoff_gen
			tse_mac_mac_misc_connection_magic_wakeup              : out   std_logic;                                        -- magic_wakeup
			tse_mac_mac_misc_connection_magic_sleep_n             : in    std_logic                     := 'X';             -- magic_sleep_n
			tse_mac_mac_misc_connection_ff_tx_crc_fwd             : in    std_logic                     := 'X';             -- ff_tx_crc_fwd
			tse_mac_mac_misc_connection_ff_tx_septy               : out   std_logic;                                        -- ff_tx_septy
			tse_mac_mac_misc_connection_tx_ff_uflow               : out   std_logic;                                        -- tx_ff_uflow
			tse_mac_mac_misc_connection_ff_tx_a_full              : out   std_logic;                                        -- ff_tx_a_full
			tse_mac_mac_misc_connection_ff_tx_a_empty             : out   std_logic;                                        -- ff_tx_a_empty
			tse_mac_mac_misc_connection_rx_err_stat               : out   std_logic_vector(17 downto 0);                    -- rx_err_stat
			tse_mac_mac_misc_connection_rx_frm_type               : out   std_logic_vector(3 downto 0);                     -- rx_frm_type
			tse_mac_mac_misc_connection_ff_rx_dsav                : out   std_logic;                                        -- ff_rx_dsav
			tse_mac_mac_misc_connection_ff_rx_a_full              : out   std_logic;                                        -- ff_rx_a_full
			tse_mac_mac_misc_connection_ff_rx_a_empty             : out   std_logic;                                        -- ff_rx_a_empty
			tse_mac_pcs_mac_tx_clock_connection_clk               : in    std_logic                     := 'X';             -- clk
			tse_mac_pcs_mac_rx_clock_connection_clk               : in    std_logic                     := 'X';             -- clk
			tofpet_avalon_mm_if_0_tofpet_conduit_DATA_OUT0        : in    std_logic_vector(31 downto 0) := (others => 'X'); -- DATA_OUT0
			tofpet_avalon_mm_if_0_tofpet_conduit_EMPTY0           : in    std_logic                     := 'X';             -- EMPTY0
			tofpet_avalon_mm_if_0_tofpet_conduit_FULL0            : in    std_logic                     := 'X';             -- FULL0
			tofpet_avalon_mm_if_0_tofpet_conduit_DATA_OUT1        : in    std_logic_vector(31 downto 0) := (others => 'X'); -- DATA_OUT1
			tofpet_avalon_mm_if_0_tofpet_conduit_EMPTY1           : in    std_logic                     := 'X';             -- EMPTY1
			tofpet_avalon_mm_if_0_tofpet_conduit_FULL1            : in    std_logic                     := 'X';             -- FULL1
			tofpet_avalon_mm_if_0_tofpet_conduit_DATA_OUT2        : in    std_logic_vector(31 downto 0) := (others => 'X'); -- DATA_OUT2
			tofpet_avalon_mm_if_0_tofpet_conduit_EMPTY2           : in    std_logic                     := 'X';             -- EMPTY2
			tofpet_avalon_mm_if_0_tofpet_conduit_FULL2            : in    std_logic                     := 'X';             -- FULL2
			tofpet_avalon_mm_if_0_tofpet_conduit_DATA_OUT3        : in    std_logic_vector(31 downto 0) := (others => 'X'); -- DATA_OUT3
			tofpet_avalon_mm_if_0_tofpet_conduit_EMPTY3           : in    std_logic                     := 'X';             -- EMPTY3
			tofpet_avalon_mm_if_0_tofpet_conduit_FULL3            : in    std_logic                     := 'X';             -- FULL3
			tofpet_avalon_mm_if_0_tofpet_conduit_DATA_OUT4        : in    std_logic_vector(31 downto 0) := (others => 'X'); -- DATA_OUT4
			tofpet_avalon_mm_if_0_tofpet_conduit_EMPTY4           : in    std_logic                     := 'X';             -- EMPTY4
			tofpet_avalon_mm_if_0_tofpet_conduit_DATA_OUT5        : in    std_logic_vector(31 downto 0) := (others => 'X'); -- DATA_OUT5
			tofpet_avalon_mm_if_0_tofpet_conduit_EMPTY5           : in    std_logic                     := 'X';             -- EMPTY5
			tofpet_avalon_mm_if_0_tofpet_conduit_FULL5            : in    std_logic                     := 'X';             -- FULL5
			tofpet_avalon_mm_if_0_tofpet_conduit_CTRL_FIFO_OUT    : in    std_logic_vector(31 downto 0) := (others => 'X'); -- CTRL_FIFO_OUT
			tofpet_avalon_mm_if_0_tofpet_conduit_CTRL_FIFO_OUT_RE : out   std_logic;                                        -- CTRL_FIFO_OUT_RE
			tofpet_avalon_mm_if_0_tofpet_conduit_CTRL_FIFO_IN     : out   std_logic_vector(31 downto 0);                    -- CTRL_FIFO_IN
			tofpet_avalon_mm_if_0_tofpet_conduit_CTRL_FIFO_IN_WE  : out   std_logic;                                        -- CTRL_FIFO_IN_WE
			tofpet_avalon_mm_if_0_tofpet_conduit_NBIT_INOUT       : out   std_logic_vector(31 downto 0);                    -- NBIT_INOUT
			tofpet_avalon_mm_if_0_tofpet_conduit_COMMAND          : out   std_logic_vector(31 downto 0);                    -- COMMAND
			tofpet_avalon_mm_if_0_tofpet_conduit_FULL4            : in    std_logic                     := 'X';             -- FULL4
			tofpet_avalon_mm_if_0_tofpet_conduit_STATUS_WORD      : in    std_logic_vector(31 downto 0) := (others => 'X'); -- STATUS_WORD
			tofpet_avalon_mm_if_0_tofpet_conduit_READ0            : out   std_logic;                                        -- READ0
			tofpet_avalon_mm_if_0_tofpet_conduit_READ1            : out   std_logic;                                        -- READ1
			tofpet_avalon_mm_if_0_tofpet_conduit_READ2            : out   std_logic;                                        -- READ2
			tofpet_avalon_mm_if_0_tofpet_conduit_READ3            : out   std_logic;                                        -- READ3
			tofpet_avalon_mm_if_0_tofpet_conduit_READ4            : out   std_logic;                                        -- READ4
			tofpet_avalon_mm_if_0_tofpet_conduit_READ5            : out   std_logic;                                        -- READ5
			tofpet_avalon_mm_if_0_tofpet_conduit_USED_WORDS0      : in    std_logic_vector(10 downto 0) := (others => 'X'); -- USED_WORDS0
			tofpet_avalon_mm_if_0_tofpet_conduit_USED_WORDS1      : in    std_logic_vector(10 downto 0) := (others => 'X'); -- USED_WORDS1
			tofpet_avalon_mm_if_0_tofpet_conduit_USED_WORDS2      : in    std_logic_vector(10 downto 0) := (others => 'X'); -- USED_WORDS2
			tofpet_avalon_mm_if_0_tofpet_conduit_USED_WORDS3      : in    std_logic_vector(10 downto 0) := (others => 'X'); -- USED_WORDS3
			tofpet_avalon_mm_if_0_tofpet_conduit_USED_WORDS4      : in    std_logic_vector(10 downto 0) := (others => 'X'); -- USED_WORDS4
			tofpet_avalon_mm_if_0_tofpet_conduit_USED_WORDS5      : in    std_logic_vector(10 downto 0) := (others => 'X')  -- USED_WORDS5
		);
	end component EthernetSystem;

